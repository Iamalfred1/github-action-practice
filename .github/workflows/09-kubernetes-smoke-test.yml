name: 09 Kubernetes smoke test

on:
    push:
        branches: [main, github-action]
    pull_request:
        branches: [main]

env:
    IMAGE_NAME: iamalfred7/allhands01
    PLATFORMS: linux/arm64,linux/amd64
    GHCR_IMAGE: ghcr.io/iamalfred1/allhands01
    CLUSTER_NAME: fred-test-cluster

jobs:
    k8s-smoke-test:
        name: Build, Deploy & Test in K8s
        runs-on: ubuntu-latest

        permissions:
            contents: read
            pull-requests: write
            security-events: write
            packages: write

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push test image to GHCR
              uses: docker/build-push-action@v6
              with:
                context: .
                push: true
                tags: ${{ env.GHCR_IMAGE }}:test-${{ github.run_id }}
                target: test
                platforms: linux/amd64
                cache-from: type=gha
                cache-to: type=gha,mode=max
                labels: |
                    org.opencontainers.image.title=AllHands Demo App - Test Image
                    org.opencontainers.image.description=K8s smoke test image
                    org.opencontainers.image.vendor=Fred's Learning Project
                    org.opencontainers.image.revision=${{ github.sha }}
                    org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

            - name: Security scan - Full report (non-blocking)
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: ${{ env.GHCR_IMAGE }}:test-${{ github.run_id }}
                format: table
                exit-code: 0

            - name: Security scan test image - Critical Gate (blocking)
              id: trivy_report
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: ${{ env.GHCR_IMAGE }}:test-${{ github.run_id }}
                format: 'sarif'
                vuln-type: 'os,library'
                severity: 'HIGH,CRITICAL'
                output: 'trivy-results.sarif'
                exit-code: 1

            - name: Upload Trivy scan result to GitHub security
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                sarif_file: 'trivy-results.sarif'

            - name: Create K3D Kubernetes cluster
              uses: AbsaOSS/k3d-action@v2
              with:
                cluster-name: ${{ env.CLUSTER_NAME }}
                args: >-
                    --agents 1
                    --no-lb
                    --wait
                    --timeout 60s
                    --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

            - name: Verify cluster readiness
              run: |
                echo "Check cluster status..."
                kubectl cluster-info
                kubectl get nodes -o wide
                kubectl get pods --all-namespaces

                kubectl wait --for=condition=Ready nodes --all --timeout=60s

            - name: Create registry secret
              run: |
                kubectl create secret docker-registry regcred \
                    --docker-server=https://ghcr.io \
                    --docker-username=${{ github.actor }} \
                    --docker-password=${{ secrets.GITHUB_TOKEN }} \
                    --dry-run=client -o yaml | kubectl apply -f -

            - name: Deploy and test in kubernetes
              run: |
                echo "Deploying application to Kubernetes..."
                export TESTING_IMAGE="${{ env.GHCR_IMAGE }}:test-${{ github.run_id }}"

                envsubst < manifests/deployment.yaml | kubectl apply -f -

                echo "Waiting for deployment to be ready..."
                kubectl rollout status deployment myapp --timeout=120s

                kubectl get deployment/myapp -o wide
                kubectl get pods -l app=myapp -o wide

                echo "Running smoke tests..."

                kubectl exec deployment/myapp -- curl --fail --silent --show-error localhost || {
                    echo "Smoke test failed: Basic connectivity"
                    kubectl logs deployment/myapp --tail=50
                    exit 1
                }
                echo "Test 1 passed: Basic connectivity"

                kubectl exec deployment/myapp -- curl --fail --silent localhost/health 2>/dev/null && {
                    echo "Test 2 passed: Health endpoint avaiables"
                } || {
                    echo "Test 2 Skipped: No health endpoint (this is OK)"
                }

                kubectl expose deployment myapp --port=80 --target-port=80 --name=myapp-service || echo "Service already exists"
                kubectl get service myapp-service

                kubectl port-forward service/myapp-service 8080:80 & 
                PF_PID=$!
                sleep 5

                curl --fail --silent --show-error http://localhost:8080 || {
                    echo "Service accessibility test failed"
                    kill $PF_PID 2>/dev/null
                    exit 1
                }

                echo "Test 3 passed: Service accessibility"

                kill $PF_PID 2>/dev/null

                echo "All smoke test passed!"

            - name: Collect Kubernetes logs
              if: always()
              run: |
                echo "Collecting Kubernetes diagnostic information..."
                mkdir -p k8s-logs

                kubectl describe deployment/myapp > k8s-logs/deployment.txt 2>/dev/null || true
                kubectl get pods -l app=myapp -o yaml > k8s-logs/pods.yaml 2>/dev/null || true

                kubectl logs deployment/myapp --tail=100 > k8s-logs/app-logs.txt 2>/dev/null || true

                kubectl get events --sort-by=.metadata.creationTimestamp > k8s-logs/events.txt 2>/dev/null || true

                echo "Logs collected in k8s-logs/ directory"
            
            - name: Upload K8s logs
              if: always()
              uses: actions/upload-artifact@v4
              with:
                name: k8s-logs-${{ github.run_id }}
                path: k8s-logs/
                retention-days: 7

            - name: Generate metadata for production
              id: meta
              uses: docker/metadata-action@v5
              with:
                images: |
                    ${{ env.IMAGE_NAME }}
                    ${{ env.GHCR_IMAGE }}
                flavor:
                    latest=false
                tags: |
                    type=raw,value=09-kubernetes-smoke-test
                    type=raw,value=latest,enable={{is_default_branch}}
                    type=ref,event=pr,prefix=pr-
                labels: |
                    org.opencontainers.image.title=AllHands Demo App
                    org.opencontainers.image.description=Production-ready image tests in K8s
                    org.opencontainers.image.vendor=Fred's Learning Project
                    org.opencontainers.image.revision=${{ github.sha }}
                    org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            
            - name: Build and push production images
              if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
              uses: docker/build-push-action@v6
              with:
                context: .
                platforms: ${{ env.PLATFORMS }}
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                cache-from: type=gha
                cache-to: type=gha,mode=max
            
            - name: Find existing PR comment
              uses: peter-evans/find-comment@v3
              if: github.event_name == 'pull_request'
              id: find_comment
              with:
                issue-number: ${{ github.event.pull_request.number }}
                comment-author: 'github-actions[bot]'
                body-includes: Kubernetes Smoke Test Results

            - name: Create or update PR comment
              uses: peter-evans/create-or-update-comment@v4
              if: github.event_name == 'pull_request'
              with:
                comment-id: ${{ steps.find_comment.outputs.comment-id }}
                issue-number: ${{ github.event.pull_request.number }}
                edit-mode: replace
                body: |
                    ## Kubernetes Smoke Test Results

                    **✅ K8s Deployment Test Completed Successfully!**

                    ### Test Summary:
                    - **Cluster:** K3D ${{ env.CLUSTER_NAME }}
                    - **Image:** `${{ env.GHCR_IMAGE }}:test-${{ github.run_id }}`
                    - **Security Scan:** ${{ steps.trivy_report.outcome}} (no HIGH/CRITICAL vulnerabilities)

                    ### Tests Performed:
                    - ✅ **Basic Connectivity** - Application responds to HTTP requests
                    - ✅ **Service Accessibility** - Kubernetes service works correctly  
                    - ✅ **Deployment Health** - Pod starts and runs successfully

                    ### Registry Information:
                    ```
                    Test Image: ${{ env.GHCR_IMAGE }}:test-${{ github.run_id }}
                    ```

                    ### Logs & Artifacts:
                    📋 Kubernetes logs and diagnostic info uploaded as workflow artifacts

                    ---
                    *Test completed at: ${{ github.event.head_commit.timestamp }}*
                    *Commit: ${{ github.event.pull_request.head.sha }}*
            
            - name: Cleanup K8s resources
              run: |
                echo "Cleaning up Kubernetes resources..."
                kubectl delete deployment/myapp --ignore-not-found=true
                kubectl delete service/myapp-service --ignore-not-found=true
                kubectl delete secret regcred --ignore-not-found=true
                echo "Cleanup completed"

