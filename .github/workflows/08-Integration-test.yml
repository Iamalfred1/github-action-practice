name: 09 Integration Testing

on:
    push:
        branches: [main, github-action]
    pull_request:
        branches: [main]

env:
    IMAGE_NAME: iamalfred7/allhands01
    PLATFORMS: linux/arm64,linux/amd64

jobs:
    integration-test:
        name: Integration Tests and Security scanning
        runs-on: ubuntu-latest

        permissions:
            contents: read
            pull-requests: write
            security-events: write

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build test image for integration testing
              uses: docker/build-push-action@v6
              with:
                context: .
                push: false
                load: true
                tags: integration-test-${{ github.run_id }}
                target: test
                platforms: linux/amd64
                cache-from: type=gha
                cache-to: type=gha,mode=max

            - name: Security scan - Full report (non-blocking)
              id: trivy_report
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: integration-test-${{ github.run_id }}
                format: table
                exit-code: 0

            - name: Security scan - Critical Gate (blocking)
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: integration-test-${{ github.run_id }}
                exit-code: 1
                ignore-unfixed: true
                vuln-type: 'os,library'
                severity: 'HIGH,CRITICAL'
                format: 'sarif'
                output: 'trivy-results.sarif'

            - name: Upload Trivy scan result to GitHub security
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                sarif_file: 'trivy-results.sarif'

            - name: Run integration tests
              run: |
                echo "Starting integration test environment..."
                export TESTING_IMAGE="integration-test-${{ github.run_id }}"
                docker compose -f docker-compose.test.yml up \
                    --exit-code-from sut \
                    --abort-on-container-exit
                echo "Integration tests completed!"

            - name: Cleanup test environment
              if: always()
              run: |
                docker compose -f docker-compose.test.yml down -v
                docker image rm integration-test-${{ github.run_id }} || true

            - name: Find existing security comment
              uses: peter-evans/find-comment@v3
              if: github.event_name == 'pull_request'
              id: find_comment
              with:
                issue-number: ${{ github.event.pull_request.number }}
                comment-author: 'github-action[bot]'
                body-includes: Security Scan Results
            
            - name: Create or Update security comment
              uses: peter-evans/create-or-update-comment@v4
              if: github.event_name == 'pull_request'
              with:
                comment-id: ${{ steps.find_comment.outputs.comment-id }}
                issue-number: ${{ github.event.pull_request.number }}
                edit-mode: replace
                body: |
                    ## Security Scan Result

                    ** Trivy Security Scan Completed **

                    ### Scan Summary:
                    - **Image:** `scan-image:${{ github.run_id }}`
                    - **Scanner:** Trivy (Latest)
                    - **Status:** ${{ steps.trivy_report.outcome }}

                    ### Detailed Results:
                    Check the **Security** tab in this repository for detailed vulnerability reports.

                    ### Security Best Practices:
                    - Keep base images updates
                    - Use specific version tags (not `latest`)
                    - Regular security scanning
                    - Monitor for new CVEs

                    ---
                    *Scan completed at: ${{ github.event.head_commit.timestamp }}
        
    build-production:
        name: Build image for production
        runs-on: ubuntu-latest
        needs: integration-test
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'

        permissions:
            contents: read

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
            
            - name: Docker metadata for Final Image Build
              id: meta
              uses: docker/metadata-action@v5
              with:
                images: ${{ env.IMAGE_NAME }}
                flavor: |
                    latest=false
                tags: |
                    type=raw,value=08-integration-test
                    type=raw,value=latest,enable={{is_default_branch}}
                    type=ref,event=pr,prefix=pr-
                labels: |
                        org.opencontainers.image.title=AllHands Demo App
                        org.opencontainers.image.description=Learning Docker and Kubernetes
                        org.opencontainers.image.vendor=Fred's Learning Github Action

            - name: Build and push production image
              if: github.ref == 'refs/heads/main'
              uses: docker/build-push-action@v6
              with:
                context: .
                platforms: ${{ env.PLATFORMS }}
                push: ${{github.event_name != 'pull_request' && github.ref == 'refs/heads/main'}}
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                cache-from: type=gha
                cache-to: type=gha,mode=max
                